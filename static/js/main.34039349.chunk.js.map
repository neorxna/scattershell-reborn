{"version":3,"sources":["features/island/world.js","features/island/islandSlice.js","features/island/properties.js","app/Resources.js","features/island/generateIsland.js","features/cell/cellSlice.js","features/cell/Cell.js","features/island/IslandMap.js","features/game/IslandGame.js","features/notes/useNotes.js","features/notes/Notes.js","App.js","app/store.js","serviceWorker.js","index.js","features/cell/Cell.module.css"],"names":["harvfn","id","name","size","starting","orthsar","ngeled","initialIslandById","Object","fromEntries","entries","world","map","islandId","island","islandSlice","createSlice","initialState","byId","selectIslandById","actions","confirmIsland","state","CellTypes","maxTiles","Math","floor","ResourceTypes","Shellfish","Fish","Pigs","Birds","BushFood","Coconuts","RootVegetables","PreciousShells","FreshWater","Flax","Bamboo","SturdyWood","FruitTrees","Guano","FoodPerResources","WoodPerResources","randomChoice","arr","random","length","rand","min","max","materialResources","values","filter","x","foodResources","allResources","buildCell","cellType","neighbourCells","contains","cellSlice","activatableByIslandId","deactivatableByIslandId","activatedByIslandId","harbourByIslandId","reducers","resetIsland","action","payload","generateGrid","cells","baseCell","getPos","y","grid","Array","fill","cell","pos","u","d","l","undefined","r","up","down","left","right","upright","downleft","upleft","downright","GridPositions","i","sPos","essentialFoodCandidates","essentialFood","randomWalkUpdate","propertiesFn","end","walk","head","candidates","fn","w","pick","push","pop","neighbours","Poisson","point","round","forEach","desertCount","neighbour","noOtherMountains","nn","generateIsland","col","row","toggleActivated","cellId","split","activatedCells","activatableCells","cellActivated","indexOf","cellNeighbourIds","activatedCellRemovedUpdate","otherId","neighbourId","secondNeighbourId","deactivatableUpdate","bfsQueue","visited","current","allowDeactivate","deactivatedSimulation","shift","unvisited","reduce","acc","selectCellById","yieldResource","selectActivatedIds","selectHarbourIds","selectRemainingActivations","createSelector","cellIds","extraStyles","display","alignItems","justifyContent","margin","width","height","fontSize","IslandCell","props","showAsLink","canActivate","allActivated","isHarbour","onCellClick","isOcean","noneActivated","isTopLeft","isTopRight","isBottomLeft","isBottomRight","classNameStr","styles","cellUnactivated","cellBlocked","cellUnactivatable","cellSettlement","cellCanActivate","cellHarbour","cellOcean","Grid","Column","onClick","disabled","className","style","transition","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","opacity","IslandMap","dispatch","useDispatch","useSelector","nDimension","keys","selectCells2d","selectActivatableIds","deactivatableCells","selectDeactivatableIds","harbourCells","remainingActivations","columns","rowIndex","Row","padding","flexWrap","colIndex","hasRemainingActivations","canDeactivate","confirmed","key","IslandGame","useEffect","useNotes","islandId_","notes","messages","stuff","activatedNeighbours","includes","oneSettlementActivated","settlements","mountainActivated","item","numHarbours","thing","num","segmentGroup","position","top","marginLeft","marginRight","backgroundColor","Notes","messagesView","Label","Group","isMobile","message","color","notesView","note","Segment","raised","basic","attached","container","paddingTop","paddingBottom","flexDirection","notesContainer","islandGameContainer","aspectRatio","App","configureStore","reducer","islandReducer","cellReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.34039349.chunk.js","sourcesContent":["export default {\n  harvfn: {\n    id: 'harvfn',\n    name: 'Harvfn',\n    size: 12,\n    starting: true\n  },\n  orthsar: {\n    id: 'orthsar',\n    name: 'Orthsar',\n    size: 2,\n  },\n  ngeled: {\n    id: 'ngeled',\n    name: 'Ngeled',\n    size: 3,\n  }\n}\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport world from './world'\n\nconst initialIslandById = Object.fromEntries(\n  Object.entries(world).map(([islandId, island]) => {\n    return [\n      islandId,\n      {\n        ...island\n      }\n    ]\n  })\n)\n\nexport const islandSlice = createSlice({\n  name: 'island',\n  initialState: {\n    byId: initialIslandById\n  }\n})\n\nexport default islandSlice.reducer\n\nexport const { confirmIsland } = islandSlice.actions\n\nexport const allCellsActivated = islandId => state =>\n  state.island.byId[islandId].remainingActivations === 0\n\nexport const noCellsActivated = islandId => state =>\n  state.island.byId[islandId].remainingActivations ===\n  state.island.byId[islandId].size\n\nexport const selectIslandById = islandId => state => state.island.byId[islandId]\n","export const CellTypes = {\n  Undecided: '?',\n  Food: '🌿',\n  Materials: '✨',\n  Settlement: '⛺',\n  Grass: '🌲',\n  Lagoon: '🐟',\n  Desert: ' ',\n  Mountain: '⛰️'\n}\n\n/* \n  Grasslands\n  Highlands\n  Swamp/Mangrove\n  Rainforest\n  Lagoon\n*/\n\nexport const CellTypesLabel = {\n  [CellTypes.Undecided]: 'undecided',\n  [CellTypes.Food]: 'food',\n  [CellTypes.Materials]: 'materials',\n  [CellTypes.Settlement]: 'settlement',\n  [CellTypes.Grass]: 'grass',\n  [CellTypes.Lagoon]: 'lagoon',\n  [CellTypes.Desert]: 'desert',\n  [CellTypes.Mountain]: 'mountain'\n}\n\nexport const IslandSizes = {\n  Tiny: 2,\n  Small: 3,\n  Medium: 5,\n  Large: 8\n}\n\nexport const maxTiles = size => size + Math.floor(size / 2)\n","const ResourceTypes = {\r\n  Shellfish: 'shellfish',\r\n  Fish: 'river fish',\r\n  Pigs: 'pigs',\r\n  Birds: 'birds',\r\n  BushFood: 'grubs',\r\n  Coconuts: 'coconuts',\r\n  RootVegetables: 'root vegetables',\r\n  PreciousShells: 'precious shells',\r\n  FreshWater: 'fresh water',\r\n  Flax: 'flax',\r\n  Bamboo: 'bamboo',\r\n  SturdyWood: 'sturdy wood',\r\n  FruitTrees: 'fruit trees',\r\n  Guano: 'guano'\r\n}\r\n\r\nconst IsGardenFood = {\r\n  [ResourceTypes.Shellfish]: false,\r\n  [ResourceTypes.Fish]: false,\r\n  [ResourceTypes.Pigs]: false,\r\n  [ResourceTypes.Birds]: false,\r\n  [ResourceTypes.BushFood]: false,\r\n  [ResourceTypes.Coconuts]: false,\r\n  [ResourceTypes.RootVegetables]: true,\r\n  [ResourceTypes.PreciousShells]: false,\r\n  [ResourceTypes.FreshWater]: false,\r\n  [ResourceTypes.Flax]: false,\r\n  [ResourceTypes.Bamboo]: false,\r\n  [ResourceTypes.SturdyWood]: false,\r\n  [ResourceTypes.FruitTrees]: true,\r\n  [ResourceTypes.Guano]: false\r\n}\r\n\r\nconst RequiresGathering = {\r\n  [ResourceTypes.Shellfish]: false,\r\n  [ResourceTypes.Fish]: false,\r\n  [ResourceTypes.Pigs]: false,\r\n  [ResourceTypes.Birds]: false,\r\n  [ResourceTypes.BushFood]: false,\r\n  [ResourceTypes.Coconuts]: true,\r\n  [ResourceTypes.RootVegetables]: true,\r\n  [ResourceTypes.PreciousShells]: true,\r\n  [ResourceTypes.FreshWater]: false,\r\n  [ResourceTypes.Flax]: false,\r\n  [ResourceTypes.Bamboo]: false,\r\n  [ResourceTypes.SturdyWood]: true,\r\n  [ResourceTypes.FruitTrees]: false,\r\n  [ResourceTypes.Guano]: false\r\n}\r\n\r\nconst IsDispersible = {\r\n  [ResourceTypes.Shellfish]: false,\r\n  [ResourceTypes.Fish]: false,\r\n  [ResourceTypes.Pigs]: true,\r\n  [ResourceTypes.Birds]: false,\r\n  [ResourceTypes.BushFood]: false,\r\n  [ResourceTypes.Coconuts]: true,\r\n  [ResourceTypes.RootVegetables]: true,\r\n  [ResourceTypes.PreciousShells]: false,\r\n  [ResourceTypes.FreshWater]: false,\r\n  [ResourceTypes.Flax]: false,\r\n  [ResourceTypes.Bamboo]: false,\r\n  [ResourceTypes.SturdyWood]: false,\r\n  [ResourceTypes.FruitTrees]: true,\r\n  [ResourceTypes.Guano]: true\r\n}\r\n\r\nconst FoodPerResources = {\r\n  [ResourceTypes.Shellfish]: 2,\r\n  [ResourceTypes.Fish]: 3,\r\n  [ResourceTypes.Pigs]: 2,\r\n  [ResourceTypes.Birds]: 1,\r\n  [ResourceTypes.BushFood]: 3,\r\n  [ResourceTypes.Coconuts]: 2,\r\n  [ResourceTypes.RootVegetables]: 1,\r\n  [ResourceTypes.PreciousShells]: 0,\r\n  [ResourceTypes.FreshWater]: 2,\r\n  [ResourceTypes.Flax]: 0,\r\n  [ResourceTypes.Bamboo]: 1,\r\n  [ResourceTypes.SturdyWood]: 0,\r\n  [ResourceTypes.FruitTrees]: 2,\r\n  [ResourceTypes.Guano]: 0\r\n}\r\n\r\nconst WoodPerResources = {\r\n  [ResourceTypes.Shellfish]: 1,\r\n  [ResourceTypes.Fish]: 0,\r\n  [ResourceTypes.Pigs]: 1,\r\n  [ResourceTypes.Birds]: 1,\r\n  [ResourceTypes.BushFood]: 0,\r\n  [ResourceTypes.Coconuts]: 2,\r\n  [ResourceTypes.RootVegetables]: 0,\r\n  [ResourceTypes.PreciousShells]: 2,\r\n  [ResourceTypes.FreshWater]: 0,\r\n  [ResourceTypes.Flax]: 3,\r\n  [ResourceTypes.Bamboo]: 2,\r\n  [ResourceTypes.SturdyWood]: 2,\r\n  [ResourceTypes.FruitTrees]: 1,\r\n  [ResourceTypes.Guano]: 2\r\n}\r\n\r\nconst Boons = {}\r\nconst Burdens = {}\r\n\r\nexport {\r\n  ResourceTypes,\r\n  FoodPerResources,\r\n  WoodPerResources,\r\n  Boons,\r\n  Burdens,\r\n  RequiresGathering,\r\n  IsDispersible,\r\n  IsGardenFood\r\n}\r\n","import { CellTypes } from './properties'\nimport * as Poisson from 'poisson-disk-sampling'\nimport {\n  ResourceTypes,\n  FoodPerResources,\n  WoodPerResources\n} from '../../app/Resources'\n\nconst GridPositions = (grid, size) => {\n  const u = pos => pos - size\n  const d = pos => pos + size\n  const l = pos => (pos % size === 0 ? undefined : pos - 1)\n  const r = pos => (pos % size === size - 1 ? undefined : pos + 1)\n\n  const up = pos => grid[u(pos)]\n  const down = pos => grid[d(pos)]\n  const left = pos => grid[l(pos)]\n  const right = pos => grid[r(pos)]\n\n  const upright = pos => grid[u(r(pos))]\n  const downleft = pos => grid[d(l(pos))]\n  const upleft = pos => grid[u(l(pos))]\n  const downright = pos => grid[d(r(pos))]\n\n  return { up, down, left, right, upright, downleft, upleft, downright }\n}\n\nconst randomChoice = arr => {\n  let index = Math.floor(Math.random() * arr.length)\n  return arr[index]\n}\n\nconst rand = (min, max) => Math.floor(Math.random() * (max - min + 1) + min)\n\nconst materialResources = Object.values(ResourceTypes).filter(x => {\n  return WoodPerResources[x] > 0\n})\nconst foodResources = Object.values(ResourceTypes).filter(\n  x => FoodPerResources[x] > 0\n)\nconst allResources = Object.values(ResourceTypes)\n\nconst buildCell = (cellType, neighbourCells) => {\n  let contains = []\n  if (cellType === CellTypes.Materials) {\n    contains = [\n      randomChoice(materialResources),\n      randomChoice(materialResources)\n    ]\n  } else if (cellType === CellTypes.Food) {\n    contains = [randomChoice(foodResources), randomChoice(foodResources)]\n  } else if (cellType === CellTypes.Desert) {\n    contains = [\n      randomChoice([\n        ResourceTypes.BushFood,\n        ResourceTypes.Coconuts,\n        null,\n        null,\n        null\n      ])\n    ].filter(x => x !== null)\n  } else if (cellType === CellTypes.Lagoon) {\n    contains = [\n      randomChoice([ResourceTypes.FreshWater, null]),\n      randomChoice([ResourceTypes.Fish, null])\n    ].filter(x => x !== null)\n  } else if (cellType === CellTypes.Mountain) {\n    contains = [\n      randomChoice([\n        ResourceTypes.FreshWater,\n        ResourceTypes.Birds,\n        ResourceTypes.Bamboo,\n        null\n      ])\n    ].filter(x => x !== null)\n  } else {\n    contains = [randomChoice(allResources)]\n  }\n  return { cellType, contains }\n}\n\nexport const generateIsland = size => {\n  const baseCell = {\n    cellType: CellTypes.Undecided\n  }\n\n  const getPos = (x, y) => y * size + x\n\n  let grid = Array(size * size)\n    .fill({ ...baseCell })\n    .map((cell, pos) => ({ ...cell, pos }))\n\n  const {\n    up,\n    down,\n    left,\n    right,\n    upleft,\n    upright,\n    downleft,\n    downright\n  } = GridPositions(grid, size)\n\n  // add size/3 settlements\n\n  for (let i = 0; i < size / 4; i++) {\n    let x = rand(0, size - 1)\n    let y = rand(0, size - 1)\n    let cell = grid[getPos(x, y)]\n    grid[getPos(x, y)] = { ...cell, cellType: CellTypes.Settlement }\n  }\n\n  // add at least 1 food next to a settlement.\n  // find a settlement, pick a random direction that leads to another cell, place food.\n  const sPos = randomChoice(\n    grid.filter(cell => cell.cellType === CellTypes.Settlement)\n  ).pos\n  const essentialFoodCandidates = [\n    up(sPos),\n    down(sPos),\n    left(sPos),\n    right(sPos)\n  ].filter(x => x != undefined && x.cellType === CellTypes.Undecided)\n  const essentialFood = randomChoice(essentialFoodCandidates)\n\n  grid[essentialFood.pos] = {\n    ...essentialFood,\n    ...buildCell(CellTypes.Food)\n  }\n\n  const randomWalkUpdate = propertiesFn => {\n    let walk = [grid[sPos]]\n\n    let end = null\n    while (walk.length < size) {\n      let head = walk[walk.length - 1]\n      let candidates = [up, down, left, right]\n        .map(fn => fn(head.pos))\n        .filter(\n          x =>\n            x &&\n            (walk.length > 3\n              ? x.cellType === CellTypes.Undecided\n              : x.cellType !== CellTypes.Settlement &&\n                x.cellType !== CellTypes.Food) &&\n            walk.filter(w => w.pos === x.pos).length === 0\n        )\n      let pick = randomChoice(candidates)\n      if (pick) walk.push(pick)\n      else {\n        break\n      }\n    }\n    end = walk.pop()\n    grid[end.pos] = {\n      ...end,\n      ...propertiesFn([up, down, left, right].map(fn => fn(end.pos)))\n    }\n    return [...walk, end]\n  }\n\n  randomWalkUpdate(neighbours => buildCell(CellTypes.Materials, neighbours))\n\n  if (size > 5) {\n    randomWalkUpdate(neighbours => buildCell(CellTypes.Mountain, neighbours))\n  }\n\n  const desertRate = 1.5\n  const pDesert = new Poisson([size, size], size / desertRate)\n\n  pDesert\n    .fill()\n    .map(point => getPos(Math.round(point[0]), Math.round(point[1])))\n    .forEach(pos => {\n      if (grid[pos] && grid[pos].cellType === CellTypes.Undecided) {\n        // clump the desert cells together on von neumann neighbourhood\n        // alternate direction of pill shapes\n        let neighbours = [\n          up,\n          down,\n          left,\n          right,\n          ...randomChoice([\n            [upright, downleft],\n            [downright, upleft]\n          ])\n        ].map(fn => fn(pos))\n\n        let desertCount = 0\n        for (let neighbour of neighbours) {\n          if (neighbour && neighbour.cellType === CellTypes.Undecided) {\n            grid[neighbour.pos] = {\n              ...grid[neighbour.pos],\n              ...buildCell(CellTypes.Desert)\n            }\n            desertCount += 1\n          }\n        }\n        // oasis :)\n        grid[pos] = {\n          ...grid[pos],\n          ...buildCell(desertCount === 6 ? CellTypes.Lagoon : CellTypes.Desert)\n        }\n      }\n    })\n\n  const pMountains = new Poisson([size, size], size / 4)\n\n  pMountains\n    .fill()\n    .map(point => getPos(Math.round(point[0]), Math.round(point[1])))\n    .forEach(pos => {\n      let noOtherMountains =\n        [left, right, up, down]\n          .map(fn => fn(pos))\n          .filter(nn => nn == undefined || nn.cellType === CellTypes.Mountain)\n          .length === 0\n\n      if (\n        grid[pos] &&\n        grid[pos].cellType === CellTypes.Undecided &&\n        noOtherMountains\n      ) {\n        grid[pos] = { ...grid[pos], ...buildCell(CellTypes.Mountain, []) } // todo\n        let neighbours = [upright(pos), downleft(pos)]\n        for (let neighbour of neighbours) {\n          if (neighbour && neighbour.cellType === CellTypes.Undecided) {\n            let others = [up, down, left, right].map(fn => fn(neighbour.pos))\n            let noOtherMountains =\n              others.filter(\n                nn => nn == undefined || nn.cellType === CellTypes.Mountain\n              ).length === 0\n            if (noOtherMountains) {\n              grid[neighbour.pos] = {\n                ...grid[neighbour.pos],\n                ...buildCell(CellTypes.Mountain, [])\n              } // todo\n            }\n          }\n        }\n      }\n    })\n\n  const pGrass = new Poisson([size, size], size / 12)\n\n  pGrass\n    .fill()\n    .map(point => getPos(Math.round(point[0]), Math.round(point[1])))\n    .forEach(pos => {\n      if (grid[pos] && grid[pos].cellType === CellTypes.Undecided) {\n        grid[pos] = { ...grid[pos], ...buildCell(CellTypes.Grass) }\n      }\n    })\n\n  grid.forEach(cell => {\n    if (cell.cellType === CellTypes.Undecided) {\n      grid[cell.pos] = {\n        ...cell,\n        ...buildCell(\n          randomChoice([\n            CellTypes.Food,\n            CellTypes.Food,\n            CellTypes.Materials,\n            CellTypes.Desert,\n            CellTypes.Desert,\n            CellTypes.Lagoon\n            // CellTypes.Undecided\n          ])\n        )\n      }\n    }\n  })\n\n  return grid\n}\n","import { createSlice, createSelector } from '@reduxjs/toolkit'\nimport { generateIsland } from '../island/generateIsland'\nimport world from '../island/world'\nimport { CellTypes, maxTiles } from '../island/properties'\n\nexport const cellSlice = createSlice({\n  name: 'cell',\n  initialState: {\n    byId: {},\n    activatableByIslandId: {}, // stores the ids of cells that can be activated. */\n    deactivatableByIslandId: {} /* stores the ids of activated cells that can be deactivated. */,\n    activatedByIslandId: {} /* stores the ids of cells that have been activated */,\n    harbourByIslandId: {} /* stores the ids of cells that are harbours */\n  },\n  reducers: {\n    resetIsland: (state, action) => {\n      const { islandId } = action.payload\n      state.activatableByIslandId[islandId] = []\n      state.deactivatableByIslandId[islandId] = []\n      state.activatedByIslandId[islandId] = []\n      state.harbourByIslandId[islandId] = []\n    },\n    generateGrid: (state, action) => {\n      const { islandId } = action.payload\n      const { size } = world[islandId]\n      const cells = generateIsland(size)\n\n      state.activatableByIslandId[islandId] = []\n      state.deactivatableByIslandId[islandId] = []\n      state.activatedByIslandId[islandId] = []\n      state.harbourByIslandId[islandId] = []\n\n      cells.forEach(cell => {\n        const col = cell.pos % size\n        const row = Math.floor(cell.pos / size)\n        const id = `${islandId}:${row}_${col}`\n\n        let neighbours = {}\n        if (col > 0) neighbours['n'] = `${islandId}:${row}_${col - 1}`\n        if (col < size - 1) neighbours['s'] = `${islandId}:${row}_${col + 1}`\n        if (row > 0) neighbours['w'] = `${islandId}:${row - 1}_${col}`\n        if (row < size - 1) neighbours['e'] = `${islandId}:${row + 1}_${col}`\n\n        state.byId[id] = {\n          ...cell,\n          id,\n          row,\n          col,\n          islandId,\n          neighbours\n        }\n      })\n    },\n    toggleActivated: (state, action) => {\n      const { cellId } = action.payload\n      const islandId = cellId.split(':')[0]\n\n      const activatedCells = () => state.activatedByIslandId[islandId]\n      const deactivatableCells = () => state.deactivatableByIslandId[islandId]\n      const activatableCells = () => state.activatableByIslandId[islandId]\n\n      const cellActivated = () => activatedCells().indexOf(cellId) !== -1\n      const cellNeighbourIds = () =>\n        Object.entries(state.byId[cellId].neighbours).map(([dir, id]) => id)\n      const cellCanDeactivate = () =>\n        deactivatableCells().indexOf(cellId) !== -1\n      const cellCanActivate = () =>\n        (activatableCells().indexOf(cellId) !== -1 ||\n          activatableCells().length === 0) &&\n        activatedCells().length < maxTiles(world[islandId].size)\n\n      if (cellActivated() && cellCanDeactivate()) {\n        /** * Deactivating ***\n\n        /* Manage activated */\n        // mark the cell deactivated and activatable\n        const activatedCellRemovedUpdate = activatedCells().filter(\n          otherId => otherId !== cellId\n        )\n        state.activatedByIslandId[islandId] = activatedCellRemovedUpdate\n\n        if (\n          activatableCells().indexOf(cellId) === -1 &&\n          activatedCells().length !== 0\n        ) {\n          state.activatableByIslandId[islandId].push(cellId)\n        }\n\n        /* Manage activatable */\n        // for each neighbour, check if that cell still has at least 1 neighbour.\n        cellNeighbourIds().forEach(neighbourId => {\n          const secondNeighbourIds = Object.entries(\n            state.byId[neighbourId].neighbours\n          ).map(([dir, id]) => id)\n\n          const numActiveNeighbours = secondNeighbourIds.filter(\n            secondNeighbourId =>\n              activatedCells().indexOf(secondNeighbourId) !== -1\n          ).length\n\n          // remove the neighbour if it has been left with no active neighbours\n          if (numActiveNeighbours === 0) {\n            state.activatableByIslandId[islandId] = activatableCells().filter(\n              otherId => otherId !== neighbourId\n            )\n          }\n        })\n      } else if (!cellActivated() && cellCanActivate()) {\n        /** * Activating ***/\n        /* Manage activated */\n\n        // mark the cell activated and activatable\n        state.activatedByIslandId[islandId].push(cellId)\n        state.activatableByIslandId[islandId] = activatableCells().filter(\n          id => id !== cellId\n        )\n\n        /* Manage activatable */\n        // mark all non-activated neighbours of this cell as activatable\n        cellNeighbourIds().forEach(neighbourId => {\n          if (\n            activatableCells().indexOf(neighbourId) === -1 &&\n            activatedCells().indexOf(neighbourId) === -1\n          ) {\n            state.activatableByIslandId[islandId].push(neighbourId)\n          }\n        })\n      }\n\n      /* Manage unactivatable\n         For every activated cell on the same island,\n         run the bfs search for connected components\n         (after above changes have taken place)\n       */\n\n      let deactivatableUpdate = []\n\n      activatedCells().forEach(id => {\n        let bfsQueue = []\n        let visited = {}\n        let current = null\n        let allowDeactivate = false\n\n        // simulate removing this id.\n        const deactivatedSimulation = activatedCells().filter(\n          otherId => otherId !== id\n        )\n\n        if (deactivatedSimulation.length === 0) {\n          // cell is the only one activated.\n          allowDeactivate = true\n        } else {\n          bfsQueue.push(deactivatedSimulation[0])\n          while (bfsQueue.length > 0) {\n            current = bfsQueue.shift()\n            if (!visited[current]) {\n              visited[current] = true\n              // add activated neighbours to the queue\n              Object.entries(state.byId[current].neighbours)\n                .filter(\n                  ([dir, neighbourId]) =>\n                    deactivatedSimulation.indexOf(neighbourId) !== -1\n                )\n                .forEach(([dir, neighbourId]) => {\n                  bfsQueue.push(neighbourId)\n                })\n            }\n          }\n          // any activated cells on the same island that were not visited?\n          const unvisited = deactivatedSimulation.filter(\n            id => visited[id] == undefined\n          )\n          const connected = unvisited.length === 0\n          if (connected) {\n            allowDeactivate = true\n          }\n        }\n        if (allowDeactivate) {\n          deactivatableUpdate.push(id)\n        }\n      })\n\n      state.deactivatableByIslandId[islandId] = deactivatableUpdate\n\n      /* recompute harbours for this island */\n\n      state.harbourByIslandId[islandId] = activatableCells().filter(cellId => {\n        return (\n          Object.entries(state.byId[cellId].neighbours)\n            .map(([dir, neighbourId]) => neighbourId)\n            .reduce((acc, neighbourId) => {\n              return (\n                acc + (activatedCells().indexOf(neighbourId) === -1 ? 0 : 1)\n              )\n            }, 0) > 1\n        )\n      })\n    }\n  }\n})\n\nexport const {\n  generateGrid,\n  toggleActivated,\n  yieldResource,\n  resetIsland\n} = cellSlice.actions\n\nexport const selectCellById = state => state.cell.byId\n\nexport const selectCellsByIsland = islandId_ => state =>\n  Object.values(state.cell.byId).filter(\n    ({ islandId }) => islandId === islandId_\n  )\n\nexport const selectCells2d = islandId =>\n  createSelector([selectCellById], cells => {\n    const { size } = world[islandId]\n    const nDimension = [...Array(size).keys()]\n\n    // only return a result when the island has been generated.\n    if (cells[`${islandId}:0_0`] === undefined) {\n      return undefined\n    }\n\n    return nDimension.map(row =>\n      nDimension.map(col => cells[`${islandId}:${row}_${col}`])\n    )\n  })\n\nexport const selectDeactivatableIds = islandId => state =>\n  state.cell.deactivatableByIslandId[islandId] || []\n\nexport const selectActivatableIds = islandId => state =>\n  state.cell.activatableByIslandId[islandId] || []\n\nexport const selectActivatedIds = islandId => state =>\n  state.cell.activatedByIslandId[islandId] || []\n\nexport const selectHarbourIds = islandId => state =>\n  state.cell.harbourByIslandId[islandId] || []\n\n// assumes the island size does not change\nexport const selectRemainingActivations = islandId =>\n  createSelector(\n    [selectActivatedIds(islandId)],\n    cellIds => maxTiles(world[islandId].size) - cellIds.length\n  )\n\n// assuming celltype can change through the course of the game\nexport const selectIslandHasMountain = islandId =>\n  createSelector(\n    [selectActivatedIds(islandId), selectCellById],\n    (cellIds, cells) =>\n      cellIds.reduce(\n        (acc, id) => acc || cells[id].cellType === CellTypes.Mountain,\n        false\n      )\n  )\n\nexport default cellSlice.reducer\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport styles from './Cell.module.css'\nimport * as poissonProcess from 'poisson-process'\nimport { yieldResourceAsync } from '../cell/cellSlice'\nimport { Grid, Button, Segment } from 'semantic-ui-react'\nimport { CellTypes } from '../island/properties'\n\nconst extraStyles = {\n  gridColumnStyle: {\n    padding: '0px'\n  },\n  segmentStyle: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: '0px',\n    width: '30px',\n    height: '30px',\n    fontSize: '1.4em'\n  }\n}\n\nexport function IslandCell (props) {\n  const {\n    showAsLink,\n    cellActivated,\n    canActivate,\n    allActivated,\n    isHarbour,\n    cell,\n    onCellClick,\n    isOcean,\n    noneActivated,\n    isTopLeft,\n    isTopRight,\n    isBottomLeft,\n    isBottomRight\n  } = props\n\n  // todo use styled-components\n  const classNameStr =\n    styles.cell +\n    (cellActivated\n      ? ` ${styles.cellActivated}`\n      : ` ${styles.cellUnactivated}`) +\n    (!showAsLink ? ` ${styles.cellBlocked}` : '') +\n    (!cellActivated && !canActivate && !noneActivated\n      ? ` ${styles.cellUnactivatable}`\n      : '') +\n    (cell.cellType === CellTypes.Settlement\n      ? ` ${styles.cellSettlement}`\n      : '') +\n    (canActivate ? ` ${styles.cellCanActivate}` : '') +\n    (isHarbour ? ` ${styles.cellHarbour}` : '') +\n    (isOcean ? ` ${styles.cellOcean}` : '') +\n    (noneActivated ? ` ${styles.noneActivated}` : '')\n\n  return (\n    <Grid.Column\n      key={cell.id}\n      onClick={() => onCellClick(cell)}\n      disabled={!showAsLink}\n      className={classNameStr}\n      style={{\n        transition: 'opacity 1s',\n        borderTopLeftRadius: isTopLeft ? '20%' : '0px',\n        borderTopRightRadius: isTopRight ? '20%' : '0px',\n        borderBottomLeftRadius: isBottomLeft ? '20%' : '0px',\n        borderBottomRightRadius: isBottomRight ? '20%' : '0px',\n        ...extraStyles.segmentStyle\n      }}\n    >\n      {((canActivate && !allActivated) ||\n        isHarbour ||\n        cellActivated ||\n        (noneActivated && cell.cellType === CellTypes.Settlement)) && (\n        <span\n          style={{ opacity:\n            isOcean\n              ? '0'\n              : cellActivated || noneActivated\n              ? '1'\n              : (isHarbour && allActivated) ? '0' \n              : '0.5',\n          }}\n        >\n          {cell.cellType}\n        </span>\n      )}\n    </Grid.Column>\n  )\n}\n","import React, { useState } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { selectIslandById } from './islandSlice'\nimport { Grid, List, Segment } from 'semantic-ui-react'\nimport { maxTiles } from './properties'\nimport {\n  selectCells2d,\n  toggleActivated,\n  selectActivatableIds,\n  selectDeactivatableIds,\n  selectActivatedIds,\n  selectHarbourIds,\n  selectRemainingActivations,\n  selectCellById,\n  selectCellsByIsland\n} from '../cell/cellSlice'\nimport { IslandCell } from '../cell/Cell'\n\nconst styles = {\n  gridContainer: {}\n}\n\nexport function IslandMap ({ islandId }) {\n  const dispatch = useDispatch()\n\n  /* Cell selectors */\n\n  const cells = useSelector(selectCells2d(islandId))\n  const activatedCells = useSelector(selectActivatedIds(islandId))\n  const activatableCells = useSelector(selectActivatableIds(islandId))\n  const deactivatableCells = useSelector(selectDeactivatableIds(islandId))\n  const harbourCells = useSelector(selectHarbourIds(islandId))\n\n  /* Island selectors */\n\n  const island = useSelector(selectIslandById(islandId))\n  const remainingActivations = useSelector(selectRemainingActivations(islandId))\n  const allActivated = remainingActivations === 0\n  const noneActivated = remainingActivations === maxTiles(island.size)\n\n  const onCellClick = cell => {\n    dispatch(toggleActivated({ islandId, cellId: cell.id }))\n  }\n\n  return !cells ? (\n    <></>\n  ) : (\n    <Grid columns={cells[0].length} style={{}}>\n      {cells.map((row, rowIndex) => (\n        <Grid.Row style={{ padding: '0px', flexWrap: 'nowrap' }} key={rowIndex}>\n          {row.map((cell, colIndex) => {\n            const cellActivated = activatedCells.indexOf(cell.id) !== -1\n            const hasRemainingActivations = remainingActivations > 0\n            const canActivate = activatableCells.indexOf(cell.id) !== -1\n            const canDeactivate = deactivatableCells.indexOf(cell.id) !== -1\n            const isHarbour = harbourCells.indexOf(cell.id) !== -1\n            const isOcean = allActivated && !isHarbour && !cellActivated\n\n            const showAsLink =\n              (island.confirmed && !isOcean && !isHarbour) ||\n              (cellActivated && canDeactivate) ||\n              (hasRemainingActivations && canActivate) ||\n              noneActivated\n\n            const isTopLeft = rowIndex === 0 && colIndex === 0\n            const isTopRight = rowIndex === 0 && colIndex === row.length - 1\n            const isBottomLeft = rowIndex === cells.length - 1 && colIndex === 0\n            const isBottomRight =\n              rowIndex === cells.length - 1 && colIndex === row.length - 1\n\n            return (\n              <IslandCell\n                {...{\n                  cell,\n                  cellActivated,\n                  canActivate,\n                  showAsLink,\n                  onCellClick,\n                  isHarbour,\n                  isOcean,\n                  allActivated,\n                  noneActivated,\n                  isTopLeft,\n                  isTopRight,\n                  isBottomLeft,\n                  isBottomRight\n                }}\n                key={cell.id}\n              />\n            )\n          })}\n        </Grid.Row>\n      ))}\n    </Grid>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { IslandMap } from '../island/IslandMap'\nimport { generateGrid } from '../cell/cellSlice'\n\nexport function IslandGame ({ islandId }) {\n  const dispatch = useDispatch()\n  useEffect(() => {\n    dispatch(generateGrid({ islandId }))\n  }, [])\n\n  return <IslandMap islandId={islandId} />\n}\n","import { CellTypes } from '../island/properties'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectIslandById } from '../island/islandSlice'\r\nimport {\r\n  selectActivatedIds,\r\n  selectHarbourIds,\r\n  selectCellsByIsland\r\n} from '../cell/cellSlice'\r\n\r\nexport function useNotes (islandId) {\r\n  let notes = []\r\n  let messages = []\r\n  let stuff = {}\r\n\r\n  const { id, size } = useSelector(selectIslandById(islandId))\r\n  const cells = useSelector(selectCellsByIsland(id))\r\n  const activatedCells = useSelector(selectActivatedIds(islandId))\r\n  const harbourCells = useSelector(selectHarbourIds(islandId))\r\n\r\n  const activatedNeighbours = cell =>\r\n    Object.values(cell.neighbours).filter(cellId =>\r\n      activatedCells.includes(cellId)\r\n    )\r\n\r\n  const oneSettlementActivated =\r\n    cells.filter(\r\n      ({ id, cellType }) =>\r\n        activatedCells.includes(id) && cellType === CellTypes.Settlement\r\n    ).length > 0\r\n\r\n  const lagoonWithFourNeighbours =\r\n    cells.filter(({ id, cellType, ...cell }) => {\r\n      if (activatedCells.includes(id) && cellType === CellTypes.Lagoon) {\r\n        return activatedNeighbours(cell).length === 4\r\n      } else {\r\n        return false\r\n      }\r\n    }).length > 0\r\n\r\n  if (oneSettlementActivated) {\r\n    if (oneSettlementActivated) messages.push('✔ settlement')\r\n  } else {\r\n    messages.push(\r\n      `need settlement (${CellTypes.Settlement})`\r\n    )\r\n  }\r\n\r\n  if (size > 2) {\r\n    // all settlements must be adjacent to two activated cells\r\n    let settlements = cells.filter(\r\n      ({ id, cellType }) =>\r\n        activatedCells.includes(id) && cellType === CellTypes.Settlement\r\n    )\r\n    let allHaveAdjacent =\r\n      settlements.length > 0 &&\r\n      settlements.filter(cell => {\r\n        return activatedNeighbours(cell).length > 1\r\n      }).length === settlements.length\r\n    if (allHaveAdjacent) {\r\n      messages.push('✔ two neighbours per settlement')\r\n    } else if (settlements.length > 0) {\r\n      messages.push('settlements need two neighbours')\r\n    }\r\n  }\r\n\r\n  if (size >= 8) {\r\n    const mountainActivated =\r\n      cells.filter(\r\n        ({ id, cellType }) =>\r\n          activatedCells.includes(id) && cellType === CellTypes.Mountain\r\n      ).length > 0\r\n    if (mountainActivated) messages.push('️✔ mountain')\r\n    else messages.push(`need one mountain (${CellTypes.Mountain})`)\r\n  }\r\n\r\n  cells.forEach(({ id, contains }) => {\r\n    if (activatedCells.includes(id) && contains && contains.length > 0) {\r\n      contains.forEach(\r\n        item => (stuff[item] = stuff[item] ? stuff[item] + 1 : 1)\r\n      )\r\n    }\r\n  })\r\n\r\n  const numHarbours = cells.filter(({ id }) => harbourCells.includes(id)).length\r\n  if (numHarbours > 0) {\r\n    notes.push(`${numHarbours} fishing harbour${numHarbours > 1 ? 's' : ''}`)\r\n  }\r\n\r\n  for (let [thing, num] of Object.entries(stuff)) {\r\n    notes.push(`${thing} ${num > 1 ? `x${num}` : ''}`)\r\n  }\r\n\r\n  return { messages, notes }\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport { Label, Segment } from 'semantic-ui-react'\r\nimport { useNotes } from './useNotes'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { selectRemainingActivations } from '../cell/cellSlice'\r\n\r\nconst styles = {\r\n  segmentGroup: {\r\n    position: 'relative',\r\n    top: '5vh',\r\n    marginLeft: '10vw',\r\n    marginRight: '10vw',\r\n    backgroundColor: 'white',\r\n    width: '360px'\r\n  }\r\n}\r\n\r\nexport function Notes ({ islandId }) {\r\n  const { messages, notes } = useNotes(islandId)\r\n  const remainingActivations = useSelector(selectRemainingActivations(islandId))\r\n\r\n  const messagesView = (\r\n    <Label.Group size={isMobile ? 'small' : 'large'}>\r\n      {messages.map(message => (\r\n        <Label\r\n          {...(message.includes('need ')\r\n            ? { color: 'violet' }\r\n            : { color: 'green' })}\r\n          key={message}\r\n        >\r\n          {message}\r\n        </Label>\r\n      ))}\r\n    </Label.Group>\r\n  )\r\n\r\n  const notesView = (\r\n    <Label.Group size={isMobile ? 'tiny' : 'small'}>\r\n      {notes.map(note => (\r\n        <Label\r\n          {...(note.includes('fishing') ? { color: 'teal' } : {})}\r\n          key={note}\r\n        >\r\n          {note}\r\n        </Label>\r\n      ))}\r\n    </Label.Group>\r\n  )\r\n\r\n  return <Segment.Group raised className='messages' style={styles.segmentGroup}>\r\n      <Segment basic attached>\r\n        {messagesView}\r\n      </Segment>\r\n      <Segment basic attached>\r\n        {notesView}\r\n        {remainingActivations === 0  ? <strong>island complete!</strong> : <><strong>{ remainingActivations }</strong> tiles remaining</>}\r\n      </Segment>\r\n\r\n    </Segment.Group>\r\n  \r\n}\r\n","import React from 'react'\r\nimport { IslandGame } from './features/game/IslandGame'\r\nimport { Notes } from './features/notes/Notes'\r\nimport './App.less'\r\n\r\nconst styles = {\r\n  container: {\r\n    paddingTop:'5vh',\r\n    paddingBottom:'5vh',\r\n    height:'100%',\r\n    width: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    justifyContent: 'start',\r\n  },\r\n  notesContainer: {\r\n  },\r\n  islandGameContainer: {\r\n    aspectRatio: '1/1',\r\n  }\r\n}\r\n\r\nfunction App () {\r\n  const islandId = 'harvfn'\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <div style={styles.islandGameContainer}>\r\n        <IslandGame islandId={islandId} />\r\n      </div>\r\n      <div style={styles.notesContainer}>\r\n        <Notes islandId={islandId} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n/* \r\n\r\nWhen an island is discovered..\r\n \r\n* Create cells for the island according to pattern\r\n ( initialise resources, etc.)\r\n* Associate the new cells with the island\r\n* Show the island builder\r\n\r\n  When all cells have been assigned and user has confirmed,\r\n  * Mark the island as active (picked up by game loop)\r\n  * \r\n\r\n */\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport islandReducer from '../features/island/islandSlice'\r\nimport cellReducer from '../features/cell/cellSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    island: islandReducer,\r\n    cell: cellReducer\r\n  }\r\n})\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'semantic-ui-less/semantic.less'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__2Yo1b\",\"cellHarbour\":\"Cell_cellHarbour__2vnwc\",\"cellBlocked\":\"Cell_cellBlocked__1bBYG\",\"cellOcean\":\"Cell_cellOcean__1y8HT\",\"cellActivated\":\"Cell_cellActivated__3UQme\",\"cellUnactivated\":\"Cell_cellUnactivated__3sbS-\",\"cellDim\":\"Cell_cellDim__2ue1M\",\"cellUnactivatable\":\"Cell_cellUnactivatable__b31ur\",\"cellSettlement\":\"Cell_cellSettlement__1tZKK\",\"cellSpan\":\"Cell_cellSpan__3xKvP\",\"noneActivated\":\"Cell_noneActivated__2DkU5\"};"],"sourceRoot":""}